syntax = "proto3";

package proto.order.order;

option go_package = "github.com/modular-project/protobuffers/order/order";

// Search Options

enum Sort {
    ASCENDING = 0;
    DESCENDING = 1;
}

enum OrderBy {
    DATE = 0;
    PRICE = 1;
    ESTABLISHMENT = 2;
    STATUS = 3;
    TYPE = 4;
}

enum Status {
    NONE = 0;
    WITHOUTPAY = 1;
    PENDING = 2;
    COMPLETED = 3;
}

enum OrderType {
    INVALID = 0;
    LOCAL = 1;
    DELIVERY = 2;
}

enum PaymentMethod {
    PAYPAL = 0;
    CASH = 1;
}

message SearchBy{
    OrderBy by = 1;
    Sort sort = 2;
}

message Default{
    uint32 limit = 1;
    uint32 offset = 2;
    repeated SearchBy search_by = 3;
}

message SearchOrders {
    Default default = 1;
    repeated uint64 establishments = 3;
    repeated Status status = 4;
    repeated OrderType types = 5;
    repeated uint64 users = 6;
    repeated float range = 7;
}

// Structs for Orders

message OrderProduct {
    uint64 id = 1;
    uint64 product_id = 2;
    uint32 quantity = 3;
    bool is_ready = 4;
    bool is_delivered = 5;
}

message Order {
    uint64 id = 1;
    uint64 establishment_id =2;
    Status status =3;
    float total = 4;
    repeated OrderProduct order_products = 5;
    oneof type {
        RemoteOrder remote_order = 6;
        LocalOrder local_order =7;
    }
    uint64 create_at = 8;
}

message RemoteOrder {
    string address_id =1;
    uint64 user_id =2; 
}

message LocalOrder {
    uint64 table_id = 1;
    uint64 employee_id = 2;
}

// Request

message OrdersByUserRequest {
    SearchOrders search = 1;
}

message OrdersRequest {
    SearchOrders search = 1;
}

message AddProductsToOrderRequest {
    uint64 id = 1;
    repeated OrderProduct products = 2;
    float total = 3; 
}

message PayLocalRequest {
    uint64 orde_id = 1;
    uint64 employee_id = 2;
    PaymentMethod payment = 3;
}

message PayDeliveryRequest {
    uint64 orde_id = 1;
    uint64 user_id = 2;
    PaymentMethod payment = 3;
    string address = 4;
    uint64 establishment_id = 5;
}

message CapturePaymentRequest {
    string id = 1;
}

message GetOrderByIDRequest {
    uint64 order_id = 1;
    uint64 user_id = 2;
} 

message CompleteProductRequest {
    uint64 id = 1;
}

message CancelOrdersRequest {
    repeated uint64 id = 1;
}

// Responses

message CancelOrdersResponse {}

message OrdersResponse {
    repeated Order orders =1;
}

message OrderResponse {
    Order order = 1;
}

message ID {
    uint64 id = 1;
}

message OrderProductsResponse {
    repeated OrderProduct order_products =1;
}

message AddProductsToOrderResponse {
    repeated uint64 ids = 1;
}

message PayDeliveryResponse{
    string id = 1;
}

message PayLocalResponse {}

message CapturePaymentResponse {
    string status = 1;
}

message CompleteProductResponse {}

message DeliverProductRequest{
    repeated uint64 id = 1;
}

message DeliverProductResponse {

}

message CreateResponse {
    uint64 order_id = 1;
    repeated uint64 product_ids = 2;
}

message RequestKitchen {
    uint64 id = 1;
    uint64 last = 2;
}

service OrderService {
    rpc CreateLocalOrder(Order) returns (CreateResponse);
    rpc CreateDeliveryOrder(Order) returns (CreateResponse);
    rpc GetOrdersByUser(OrdersByUserRequest) returns (OrdersResponse);
    rpc GetOrdersByKitchen(RequestKitchen) returns (OrderProductsResponse);
    rpc GetOrders(OrdersRequest) returns (OrdersResponse);
    rpc GetOrdersByEstablishment(OrdersRequest) returns (OrdersResponse);
    rpc GetOrderByWaiter(ID) returns (OrdersResponse);
    rpc GetOrderPendingByWaiter(ID) returns (OrdersResponse);
    rpc GetOrderByID(GetOrderByIDRequest) returns (OrderResponse);
    rpc AddProductsToOrder(AddProductsToOrderRequest) returns (AddProductsToOrderResponse);
}

service OrderStatusService {
    rpc PayLocal(PayLocalRequest) returns (PayLocalResponse);
    rpc PayDelivery(PayDeliveryRequest) returns (PayDeliveryResponse);
    rpc CompleteProduct(CompleteProductRequest) returns (CompleteProductResponse);
    rpc CapturePayment(CapturePaymentRequest) returns (CapturePaymentResponse);
    rpc DeliverProducts(DeliverProductRequest) returns (DeliverProductResponse);
    rpc CancelOrders(CancelOrdersRequest) returns (CancelOrdersResponse);
}