// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateLocalOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ID, error)
	CreateDeliveryOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ID, error)
	GetOrdersByUser(ctx context.Context, in *OrdersByUserRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	GetOrdersByKitchen(ctx context.Context, in *ID, opts ...grpc.CallOption) (*OrderProductsResponse, error)
	GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	GetOrdersByEstablishment(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	GetOrderByWaiter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*OrdersResponse, error)
	AddPorudctsToOrder(ctx context.Context, in *AddProductsToOrderRequest, opts ...grpc.CallOption) (*AddProductsToOrderResponse, error)
	PayLocalOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateLocalOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/CreateLocalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateDeliveryOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/CreateDeliveryOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByUser(ctx context.Context, in *OrdersByUserRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/GetOrdersByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByKitchen(ctx context.Context, in *ID, opts ...grpc.CallOption) (*OrderProductsResponse, error) {
	out := new(OrderProductsResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/GetOrdersByKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByEstablishment(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/GetOrdersByEstablishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByWaiter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/GetOrderByWaiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AddPorudctsToOrder(ctx context.Context, in *AddProductsToOrderRequest, opts ...grpc.CallOption) (*AddProductsToOrderResponse, error) {
	out := new(AddProductsToOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/AddPorudctsToOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PayLocalOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.order.order.OrderService/PayLocalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateLocalOrder(context.Context, *Order) (*ID, error)
	CreateDeliveryOrder(context.Context, *Order) (*ID, error)
	GetOrdersByUser(context.Context, *OrdersByUserRequest) (*OrdersResponse, error)
	GetOrdersByKitchen(context.Context, *ID) (*OrderProductsResponse, error)
	GetOrders(context.Context, *OrdersRequest) (*OrdersResponse, error)
	GetOrdersByEstablishment(context.Context, *OrdersRequest) (*OrdersResponse, error)
	GetOrderByWaiter(context.Context, *ID) (*OrdersResponse, error)
	AddPorudctsToOrder(context.Context, *AddProductsToOrderRequest) (*AddProductsToOrderResponse, error)
	PayLocalOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateLocalOrder(context.Context, *Order) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocalOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateDeliveryOrder(context.Context, *Order) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliveryOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByUser(context.Context, *OrdersByUserRequest) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByUser not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByKitchen(context.Context, *ID) (*OrderProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByKitchen not implemented")
}
func (UnimplementedOrderServiceServer) GetOrders(context.Context, *OrdersRequest) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByEstablishment(context.Context, *OrdersRequest) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByEstablishment not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByWaiter(context.Context, *ID) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByWaiter not implemented")
}
func (UnimplementedOrderServiceServer) AddPorudctsToOrder(context.Context, *AddProductsToOrderRequest) (*AddProductsToOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPorudctsToOrder not implemented")
}
func (UnimplementedOrderServiceServer) PayLocalOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayLocalOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateLocalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateLocalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/CreateLocalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateLocalOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateDeliveryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateDeliveryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/CreateDeliveryOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateDeliveryOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/GetOrdersByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByUser(ctx, req.(*OrdersByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/GetOrdersByKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByKitchen(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByEstablishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByEstablishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/GetOrdersByEstablishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByEstablishment(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByWaiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByWaiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/GetOrderByWaiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByWaiter(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AddPorudctsToOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsToOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AddPorudctsToOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/AddPorudctsToOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AddPorudctsToOrder(ctx, req.(*AddProductsToOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PayLocalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PayLocalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.order.order.OrderService/PayLocalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PayLocalOrder(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.order.order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocalOrder",
			Handler:    _OrderService_CreateLocalOrder_Handler,
		},
		{
			MethodName: "CreateDeliveryOrder",
			Handler:    _OrderService_CreateDeliveryOrder_Handler,
		},
		{
			MethodName: "GetOrdersByUser",
			Handler:    _OrderService_GetOrdersByUser_Handler,
		},
		{
			MethodName: "GetOrdersByKitchen",
			Handler:    _OrderService_GetOrdersByKitchen_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrderService_GetOrders_Handler,
		},
		{
			MethodName: "GetOrdersByEstablishment",
			Handler:    _OrderService_GetOrdersByEstablishment_Handler,
		},
		{
			MethodName: "GetOrderByWaiter",
			Handler:    _OrderService_GetOrderByWaiter_Handler,
		},
		{
			MethodName: "AddPorudctsToOrder",
			Handler:    _OrderService_AddPorudctsToOrder_Handler,
		},
		{
			MethodName: "PayLocalOrder",
			Handler:    _OrderService_PayLocalOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
