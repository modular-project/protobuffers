// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: information/establishment.proto

package establishment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstablishmentServiceClient is the client API for EstablishmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstablishmentServiceClient interface {
	Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*Establishment, error)
	GetAll(ctx context.Context, in *RequestGetAll, opts ...grpc.CallOption) (*ResponseGetAll, error)
	Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseDelete, error)
	GetByAddress(ctx context.Context, in *RequestGetByAddress, opts ...grpc.CallOption) (*ResponseAddress, error)
}

type establishmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstablishmentServiceClient(cc grpc.ClientConnInterface) EstablishmentServiceClient {
	return &establishmentServiceClient{cc}
}

func (c *establishmentServiceClient) Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) Get(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*Establishment, error) {
	out := new(Establishment)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetAll(ctx context.Context, in *RequestGetAll, opts ...grpc.CallOption) (*ResponseGetAll, error) {
	out := new(ResponseGetAll)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) Delete(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseDelete, error) {
	out := new(ResponseDelete)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetByAddress(ctx context.Context, in *RequestGetByAddress, opts ...grpc.CallOption) (*ResponseAddress, error) {
	out := new(ResponseAddress)
	err := c.cc.Invoke(ctx, "/proto.information.establishment.EstablishmentService/GetByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstablishmentServiceServer is the server API for EstablishmentService service.
// All implementations must embed UnimplementedEstablishmentServiceServer
// for forward compatibility
type EstablishmentServiceServer interface {
	Create(context.Context, *RequestCreate) (*Response, error)
	Get(context.Context, *RequestById) (*Establishment, error)
	GetAll(context.Context, *RequestGetAll) (*ResponseGetAll, error)
	Update(context.Context, *RequestUpdate) (*Response, error)
	Delete(context.Context, *RequestById) (*ResponseDelete, error)
	GetByAddress(context.Context, *RequestGetByAddress) (*ResponseAddress, error)
	mustEmbedUnimplementedEstablishmentServiceServer()
}

// UnimplementedEstablishmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstablishmentServiceServer struct {
}

func (UnimplementedEstablishmentServiceServer) Create(context.Context, *RequestCreate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEstablishmentServiceServer) Get(context.Context, *RequestById) (*Establishment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEstablishmentServiceServer) GetAll(context.Context, *RequestGetAll) (*ResponseGetAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEstablishmentServiceServer) Update(context.Context, *RequestUpdate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEstablishmentServiceServer) Delete(context.Context, *RequestById) (*ResponseDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEstablishmentServiceServer) GetByAddress(context.Context, *RequestGetByAddress) (*ResponseAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAddress not implemented")
}
func (UnimplementedEstablishmentServiceServer) mustEmbedUnimplementedEstablishmentServiceServer() {}

// UnsafeEstablishmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstablishmentServiceServer will
// result in compilation errors.
type UnsafeEstablishmentServiceServer interface {
	mustEmbedUnimplementedEstablishmentServiceServer()
}

func RegisterEstablishmentServiceServer(s grpc.ServiceRegistrar, srv EstablishmentServiceServer) {
	s.RegisterService(&EstablishmentService_ServiceDesc, srv)
}

func _EstablishmentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).Create(ctx, req.(*RequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).Get(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetAll(ctx, req.(*RequestGetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).Update(ctx, req.(*RequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).Delete(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetByAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.establishment.EstablishmentService/GetByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetByAddress(ctx, req.(*RequestGetByAddress))
	}
	return interceptor(ctx, in, info, handler)
}

// EstablishmentService_ServiceDesc is the grpc.ServiceDesc for EstablishmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstablishmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.information.establishment.EstablishmentService",
	HandlerType: (*EstablishmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EstablishmentService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EstablishmentService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EstablishmentService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EstablishmentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EstablishmentService_Delete_Handler,
		},
		{
			MethodName: "GetByAddress",
			Handler:    _EstablishmentService_GetByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "information/establishment.proto",
}
