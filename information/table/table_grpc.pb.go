// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: information/table.proto

package table

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	AddTable(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAdd, error)
	AddTables(ctx context.Context, in *RequestAdd, opts ...grpc.CallOption) (*ResponseAdd, error)
	GetFromEstablishment(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseGetAll, error)
	ChangeStatus(ctx context.Context, in *Table, opts ...grpc.CallOption) (*ResponseStatus, error)
	RemoveFromEstablishment(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ResponseDelete, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) AddTable(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseAdd, error) {
	out := new(ResponseAdd)
	err := c.cc.Invoke(ctx, "/proto.information.table.TableService/AddTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) AddTables(ctx context.Context, in *RequestAdd, opts ...grpc.CallOption) (*ResponseAdd, error) {
	out := new(ResponseAdd)
	err := c.cc.Invoke(ctx, "/proto.information.table.TableService/AddTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) GetFromEstablishment(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*ResponseGetAll, error) {
	out := new(ResponseGetAll)
	err := c.cc.Invoke(ctx, "/proto.information.table.TableService/GetFromEstablishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ChangeStatus(ctx context.Context, in *Table, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/proto.information.table.TableService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) RemoveFromEstablishment(ctx context.Context, in *RequestDelete, opts ...grpc.CallOption) (*ResponseDelete, error) {
	out := new(ResponseDelete)
	err := c.cc.Invoke(ctx, "/proto.information.table.TableService/RemoveFromEstablishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
	AddTable(context.Context, *RequestById) (*ResponseAdd, error)
	AddTables(context.Context, *RequestAdd) (*ResponseAdd, error)
	GetFromEstablishment(context.Context, *RequestById) (*ResponseGetAll, error)
	ChangeStatus(context.Context, *Table) (*ResponseStatus, error)
	RemoveFromEstablishment(context.Context, *RequestDelete) (*ResponseDelete, error)
	mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) AddTable(context.Context, *RequestById) (*ResponseAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTable not implemented")
}
func (UnimplementedTableServiceServer) AddTables(context.Context, *RequestAdd) (*ResponseAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTables not implemented")
}
func (UnimplementedTableServiceServer) GetFromEstablishment(context.Context, *RequestById) (*ResponseGetAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromEstablishment not implemented")
}
func (UnimplementedTableServiceServer) ChangeStatus(context.Context, *Table) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedTableServiceServer) RemoveFromEstablishment(context.Context, *RequestDelete) (*ResponseDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromEstablishment not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_AddTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).AddTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.table.TableService/AddTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).AddTable(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_AddTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).AddTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.table.TableService/AddTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).AddTables(ctx, req.(*RequestAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_GetFromEstablishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).GetFromEstablishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.table.TableService/GetFromEstablishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).GetFromEstablishment(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Table)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.table.TableService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ChangeStatus(ctx, req.(*Table))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_RemoveFromEstablishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).RemoveFromEstablishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.information.table.TableService/RemoveFromEstablishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).RemoveFromEstablishment(ctx, req.(*RequestDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.information.table.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTable",
			Handler:    _TableService_AddTable_Handler,
		},
		{
			MethodName: "AddTables",
			Handler:    _TableService_AddTables_Handler,
		},
		{
			MethodName: "GetFromEstablishment",
			Handler:    _TableService_GetFromEstablishment_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _TableService_ChangeStatus_Handler,
		},
		{
			MethodName: "RemoveFromEstablishment",
			Handler:    _TableService_RemoveFromEstablishment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "information/table.proto",
}
